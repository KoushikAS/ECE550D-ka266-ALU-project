// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/17/2022 11:39:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          subtractor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module subtractor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] in1;
reg [31:0] in2;
// wires                                               
wire cout;
wire [31:0] out;
wire overflow;

// assign statements (if any)                          
subtractor i1 (
// port map - connection between master ports and signals/registers   
	.cout(cout),
	.in1(in1),
	.in2(in2),
	.out(out),
	.overflow(overflow)
);
initial 
begin 
#1000000 $finish;
end 
endmodule

